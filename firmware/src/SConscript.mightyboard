#
# Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

#
# HOW TO USE THIS BUILD SCRIPT
#
# By default, this script will build the firmware for rev D Mighty Board.
# The firmware will be built, but not uploaded.
#
# To build for another platform, pass an explicit platform parameter.  For example,
# $ scons platform=mb40
#
# To upload the firmware, specify the "upload" target.  By default, this will use
# /dev/ttyUSB0 as the serial connection.
# $ scons upload
#
# If you want to select a port manually, specify it as a parameter:
# $ scons port=/dev/ttyUSB3 upload
#
# If you want to enable or disable the safety cutoff function, you
# should define the "cutoff" parameter as one or zero. For example,
# $ scons platform=mb40 cutoff=1
# will build the firmware with the safety cutoff code _enabled_.

import os
import re
import glob
from os.path import dirname
from os.path import basename

def filtered_glob_omit(env, pattern, omit=[], ondisk=True, source=False, strings=False):
    return filter(lambda f: os.path.basename(f.path) not in omit, env.Glob(pattern))

def filtered_glob_keep(env, pattern, keep=[], ondisk=True, source=False, strings=False):
    return filter(lambda f: os.path.basename(f.path) in keep, env.Glob(pattern))

# Platform parameter
platform = ARGUMENTS.get('platform','mighty_one')
if (platform == 'mb40'):
   platform = 'mighty_one'
# Use safety cutoff or not
cutoff = ARGUMENTS.get('cutoff','0')
# fived only applicable for rrmbv12
fived = ARGUMENTS.get('fived','false')
f_cpu='16000000L'

# Broken SD
broken_def = ''
broken_str = ''
broken_sd = ARGUMENTS.get('broken_sd','0')
if broken_sd == '1':
   broken_def = '-DBROKEN_SD'
   broken_str = 'b'

# Get the svn version number and use the last part
svn_version = os.popen('svnversion ../..').read()[:-1]
svn_version = svn_version.split(':')[-1]

# use locale
locale = ARGUMENTS.get('locale','ENGLISH')
locale_flag = 0

if locale.lower() in ('french','fr','francais'):
    os.environ['LOCALE'] = '_FR' 
    locale_flag = 1
else:
    if not os.environ.has_key('LOCALE'):
        os.environ['LOCALE'] = '_US'
	locale_flag = 0

single_extruder_def = ''
squeeze_srcs=[]
build_stats_def = ''

squeeze_srcs = []
max31855_def = ''
max31855 = ''

if (platform == 'mighty_one'):
    os.environ['MODEL'] = 'REPLICATOR'
    # default rev for mighty_one is revE
    board = ARGUMENTS.get('rev', 'reve')
    board_platform = 'mighty_one'
    squeeze_srcs = [
        'Menu.cc', 'Interface.cc', 'InterfaceBoard.cc', 'LiquidCrystalSerial.cc', 'DigiPots.cc',
        'PSU.cc', 'Eeprom.cc', 'PSU.cc', 'EepromMap.cc', 'Piezo.cc', 'UtilityScripts.cc' ]
elif (platform == 'mighty_one-2560'):
    os.environ['MODEL'] = 'REPLICATOR'
    # default rev for mighty_one is revE
    board = ARGUMENTS.get('rev', 'reve')
    board_platform = 'mighty_one'
    max31855 = ARGUMENTS.get('max31855','')
    if max31855 == '1':
        max31855_def = '-DMAX31855'
        max31855 = '_max31855'
elif (platform == 'mighty_two'):
    os.environ['MODEL'] = 'REPLICATOR2'
    # default rev for mighty_two is revG
    board = ARGUMENTS.get('rev', 'revg')
    board_platform = 'mighty_two'
    single_extruder_def = '-DSINGLE_EXTRUDER'
    build_stats_def = '-DBUILD_STATS'
    squeeze_srcs = [
        'Menu.cc', 'Interface.cc', 'InterfaceBoard.cc', 'LiquidCrystalSerial.cc', 'DigiPots.cc',
        'PSU.cc', 'Eeprom.cc', 'PSU.cc', 'EepromMap.cc', 'Piezo.cc', 'UtilityScripts.cc',
        'TemperatureTable.cc', 'Thermistor.cc', 'Thermocouple.cc', 'Heater.cc', 'CoolingFan.cc',
        'PID.cc'] +\
    [ os.path.basename(f) for f in glob.glob('../../src/MightyBoard/Motherboard/lib_sd/*.c') ] +\
    [ os.path.basename(f) for f in glob.glob('../../src/MightyBoard/Motherboard/boards/mighty_two/*.cc') ]
elif (platform == 'mighty_twox'):
    os.environ['MODEL'] = 'REPLICATOR2'
    # default rev for mighty_two is revG
    board = ARGUMENTS.get('rev', 'revg')
    board_platform = 'mighty_two'
    squeeze_srcs = [
        'Menu.cc', 'Interface.cc', 'InterfaceBoard.cc', 'LiquidCrystalSerial.cc', 'DigiPots.cc',
        'PSU.cc', 'Eeprom.cc', 'PSU.cc', 'EepromMap.cc', 'Piezo.cc', 'UtilityScripts.cc',
        'TemperatureTable.cc', 'Thermistor.cc', 'Thermocouple.cc', 'Heater.cc', 'CoolingFan.cc',
        'PID.cc'] +\
    [ os.path.basename(f) for f in glob.glob('../../src/MightyBoard/Motherboard/boards/mighty_two/*.cc') ]

if cutoff == '0':
    print "WARNING: Safety cutoff will be disabled."

def parse_version(v):
    if not v:
        return 0
    if v.find(".") != -1:
       parts = v.split(".")
       return parts #(int(parts[0]) * 100) + int(parts[1])
    return int(v)

def get_default_version():
	regex = re.compile(r"const uint16_t firmware_version = ([1-9]+);")
	vstr = f.get_contents().strip()
	ver = vstr.split('\n')[0]
	return parse_version(ver)

vstr = File('#/current_version.txt').get_contents().strip()
vstr = vstr.split('\n')[0]

vstr = ARGUMENTS.get('version',vstr)

version = parse_version(vstr)

version_str = str(int(version[0])) + '.' + str(int(version[1]))
target_name = platform+max31855+"_v"+str(int(version[0]))+"."+str(int(version[1]))+"."+str(int(version[2]))+broken_str

if (platform == 'mighty_one') or (platform == 'mighty_two') or (platform == 'mighty_twox') or (platform == 'mighty_one-2560'):
	default_baud = '57600'
	default_programmer = 'stk500v1'
	mcu='atmega1280'
	has_queue = 1
	has_psu = 0
	if (platform == 'mighty_one-2560'):
	    mcu='atmega2560'
else:
	print "Platform "+platform+" is not currently supported. Supported platforms are:"
	print "mb40: Mighty Board for Replicator One with Mega 1280"
	print "mighty_one: Mighty Board for Replicator 1 with Mega 1280"
	print "mighty_two: Mighty Board for Replicator 2 with Mega 1280"
	print "mighty_twox: Mighty Board for Replicator 2X with Mega 1280"
	exit()


upload_port = ARGUMENTS.get('port','/dev/ttyACM0')
upload_baud = ARGUMENTS.get('baud',default_baud)
upload_prog = ARGUMENTS.get('programmer',default_programmer)

include_paths = ['MightyBoard/shared', 'MightyBoard/Motherboard', 'MightyBoard/shared/locale', 'MightyBoard/Motherboard/avrfix', 'MightyBoard/Motherboard/boards/%s' %board_platform, '.']

flags=[
	'-DF_CPU='+str(f_cpu),
        '-DCUTOFF_PRESENT='+ cutoff,
	'-DVERSION='+str(int(version[0])*100 + int(version[1])),
	'-DSTREAM_VERSION='+str(int(version[3])*100 + int(version[4])),
  	'-DVERSION_INTERNAL='+str(int(version[2])),
        '-DSVN_VERSION='+str(svn_version),
	'-DSVN_VERSION_STR=\'"'+str(svn_version).zfill(5)+'"\'',
	'-DVERSION_STR=\'"'+version_str+'"\'',
	'-D'+board.upper(),
	broken_def,
        single_extruder_def,
	build_stats_def,
        max31855_def,
	'-mmcu='+mcu,
	'-g',
	'-Os',
	'-Wall',
	'-Winline',
	'-fno-exceptions',
	'-ffunction-sections',
	'-fdata-sections',
	'-fshort-enums',
	'-DMULKD',
	'-DSQRT',
	'-DCORDICHK',
	'-DROUNDKD',
	'-DDIVKD']

if (os.environ.has_key('BUILD_NAME')):
   flags.append('-DBUILD_NAME=' + os.environ['BUILD_NAME'])

if (os.environ.has_key('LOCALE')):
   flags.append('-DLOCALE' + os.environ['LOCALE'])

if(os.environ.has_key('MODEL')):
  flags.append('-DMODEL_' + os.environ['MODEL'])

if (os.environ.has_key('AVR_TOOLS_PATH')):
	avr_tools_path = os.environ['AVR_TOOLS_PATH']
	avr_tools_conf = os.environ['AVR_TOOLS_PATH'] + "/../etc/avrdude.conf"
elif (os.environ.has_key('AVR32_HOME')):
	avr_tools_path = os.environ['AVR32_HOME'] + '/bin'
	avr_tools_conf =  os.environ['AVR32_HOME'] + "/etc/avrdude.conf"
else:
	lines = os.popen('/usr/bin/which avr-gcc').readlines()
	if(len(lines) > 0):
		avr_tools_path = dirname(lines[0])
		avr_tools_conf = "/etc/avrdude.conf"
	else: 
		print "which gcc failed. avr-gcc path not autodetected"
		print "set AVR32_HOME or update 'which' and avr-gcc"
		exit()

if (fived == 'true'):
	flags.append('-DFOURTH_STEPPER=1')

flags_squeeze = []
for f in flags:
   flags_squeeze.append(f)
flags_squeeze.append('-mcall-prologues')

env=Environment(tools=['g++', 'gcc'],
        CC=avr_tools_path+"/avr-g++",
	CXX=avr_tools_path+"/avr-g++",
	CPPPATH=include_paths,
	CCFLAGS=flags)

env_sqz=Environment(tools=['g++', 'gcc'],
        CC=avr_tools_path+"/avr-g++",
	CXX=avr_tools_path+"/avr-g++",
	CPPPATH=include_paths,
	CCFLAGS=flags_squeeze)

env.AddMethod(filtered_glob_omit, "GlobOmit")
env_sqz.AddMethod(filtered_glob_keep, "GlobKeep")

objs = [ env.Object(env.GlobOmit('*.cc', squeeze_srcs) +
                    env.GlobOmit('MightyBoard/Motherboard/*.cc', squeeze_srcs) +
                    env.GlobOmit('MightyBoard/Motherboard/boards/%s/*.cc' % board_platform, squeeze_srcs) +
                    env.GlobOmit('MightyBoard/Motherboard/lib_sd/*.c', squeeze_srcs) +
                    env.GlobOmit('MightyBoard/shared/*.cc', squeeze_srcs) +
                    env.GlobOmit('MightyBoard/Motherboard/avrfix/*.c', squeeze_srcs)),
         env_sqz.Object(env_sqz.GlobKeep('*.cc', squeeze_srcs) +
                        env_sqz.GlobKeep('MightyBoard/Motherboard/*.cc', squeeze_srcs) +
                        env_sqz.GlobKeep('MightyBoard/Motherboard/boards/%s/*.cc' % board_platform, squeeze_srcs) +
                        env_sqz.GlobKeep('MightyBoard/Motherboard/lib_sd/*.c', squeeze_srcs) +
                        env_sqz.GlobKeep('MightyBoard/shared/*.cc', squeeze_srcs) +
                        env_sqz.GlobKeep('MightyBoard/Motherboard/avrfix/*.c', squeeze_srcs)) ]

# run_alias = Alias('run', [program], program[0].path)
# AlwaysBuild(run_alias)

hex_name = target_name + '.hex'
elf_name = target_name + '.elf'
map_name = target_name + '.map'

env.Append(BUILDERS={'Elf':Builder(action=avr_tools_path+"/avr-gcc -mmcu="+mcu+" -Os -Wl,--gc-sections -Wl,-Map,"+map_name+" -o $TARGET $SOURCES -lm")})
env.Append(BUILDERS={'Hex':Builder(action=avr_tools_path+"/avr-objcopy -O ihex -R .eeprom $SOURCES $TARGET")})
env.Elf(elf_name, objs) 
env.Hex(hex_name, elf_name)

avrdude = avr_tools_path+"/avrdude"
avrdude_flags = "-F -V -p "+mcu.replace("atmega","m")
avrdude_flags = avrdude_flags + " -C "+avr_tools_conf
avrdude_flags = avrdude_flags + " -P "+upload_port
avrdude_flags = avrdude_flags + " -c "+upload_prog
avrdude_flags = avrdude_flags + " -b "+upload_baud
avrdude_command = " ".join([avrdude,avrdude_flags,"-U","flash:w:$SOURCES"])

# env.Alias instead of just Alias because of
# http://scons.tigris.org/issues/show_bug.cgi?id=2443
upload_alias = env.Alias('upload', hex_name, avrdude_command)
AlwaysBuild(upload_alias)
