#
# Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

#
# HOW TO USE THIS BUILD SCRIPT
#
# By default, this script will build the firmware for rev D Mighty Board.
# The firmware will be built, but not uploaded.
#
# To build for another platform, pass an explicit platform parameter.  For example,
# $ scons platform=mb40
#
# To upload the firmware, specify the "upload" target.  By default, this will use
# /dev/ttyUSB0 as the serial connection.
# $ scons upload
#
# If you want to select a port manually, specify it as a parameter:
# $ scons port=/dev/ttyUSB3 upload
#
# If you want to enable or disable the safety cutoff function, you
# should define the "cutoff" parameter as one or zero. For example,
# $ scons platform=mb40 cutoff=1
# will build the firmware with the safety cutoff code _enabled_.

import os
import re
import glob
from os.path import dirname
from os.path import basename
from datetime import datetime

from src.platforms import *

def filtered_glob_omit(env, pattern, omit=[], ondisk=True, source=False, strings=False):
    return filter(lambda f: os.path.basename(f.path) not in omit, env.Glob(pattern))

def filtered_glob_keep(env, pattern, keep=[], ondisk=True, source=False, strings=False):
    return filter(lambda f: os.path.basename(f.path) in keep, env.Glob(pattern))

# Platform parameter
platform = ARGUMENTS.get('platform','mighty_one')

if not ( platform in platforms ):
	print "Platform "+platform+" is not currently supported"
	exit()

# Get platform information
features = platforms[platform]

f_cpu='16000000L'

# use locale
locale = ARGUMENTS.get('locale','ENGLISH')
if locale.lower() in ('french','fr','francais'):
    localefile = 'Menu.FR.cc'
    localetarget = 'fr'
elif locale.lower() in ('german','de','ger','deutsch'):
    localefile = 'Menu.DE.cc'
    localetarget = 'de'
else:
    localefile = 'Menu.EN.cc'
    localetarget = 'en'

# Additional defines, comma separated
defines = ARGUMENTS.get('defines', '')

# zlevel
zlevel = ARGUMENTS.get('zlevel','0')

# Heaters on Steroids
steroids = ARGUMENTS.get('heater_steroids','0')

# Core-XY
corexy_s = ARGUMENTS.get('core_xy_stepper','0')
corexy = ARGUMENTS.get('core_xy','0')

# I2C LCD
has_i2c_lcd = ARGUMENTS.get('has_i2c_lcd','0')

# Analog buttons
has_analog_buttons = ARGUMENTS.get('has_analog_buttons','0')

# ViKi interface
has_viki_interface = ARGUMENTS.get('has_viki_interface','0')

# Alternate UART
alt_uart = ARGUMENTS.get('alt_uart','0')

# MAX31855
max31855 = ARGUMENTS.get('max31855','')

# Broken SD
broken_str = ''
broken_sd = ARGUMENTS.get('broken_sd','0')
if broken_sd == '1':
   broken_str = 'b'

# Get the svn version number and use the last part
if os.path.exists('../../../../../../.svn'):
   vcs_version = os.popen('svnversion ../../../../../..').read()[:-1]
   vcs_version = vcs_version.split(':')[-1]
elif os.path.exists('../../svn-version'):
   vcs_version = open('../../svn-version', 'r').read().strip()
elif os.path.exists('../../../.git'):
   vcs_version = os.popen('git log --pretty=format:\'%h\' --abbrev=5 -n 1').read()[:-1]
else:
   vcs_version = "1234"

def parse_version(v):
    if not v:
        return 0
    if v.find(".") != -1:
       parts = v.split(".")
       return parts #(int(parts[0]) * 100) + int(parts[1])
    return int(v)

def get_default_version():
	regex = re.compile(r"const uint16_t firmware_version = ([1-9]+);")
	vstr = f.get_contents().strip()
	ver = vstr.split('\n')[0]
	return parse_version(ver)

vstr = File('#/current_version.txt').get_contents().strip()
vstr = vstr.split('\n')[0]

vstr = ARGUMENTS.get('version',vstr)

version = parse_version(vstr)

version_str = str(int(version[0])) + '.' + str(int(version[1]))

flags=[
	'-DF_CPU='+str(f_cpu),
	'-DCUTOFF_PRESENT=0',
	'-DESTIMATE_TIME',
	'-DVERSION='+str(int(version[0])*100 + int(version[1])),
	'-DSTREAM_VERSION='+str(int(version[3])*100 + int(version[4])),
  	'-DVERSION_INTERNAL='+str(int(version[2])),
  	'-DVCS_VERSION='+str(vcs_version),
  	'-DVCS_VERSION_STR=\\"'+str(vcs_version).zfill(5)+'\\"',
	'-DVERSION_STR=\\"'+version_str+'\\"',
	'-DDATE_STR=\\"'+datetime.now().strftime('%d/%m/%y')+'\\"',
	'-g',
	'-Os',
	'-Wall',
	'-Wextra',
	'-Winline',
	'-Wno-deprecated-declarations',
	'-fno-exceptions',
	'-ffunction-sections',
	'-fdata-sections',
	'-fshort-enums',
	'-mmcu=' + features.get('mcu', 'atmega1280') ]

#if platform.startswith('azteeg'):
#   flags.append('-mrelax');

# Extra defines
if defines != '':
   defines = defines.replace(' ','').split(',')
   for d in defines:
       if d != '':
       	  flags.append('-D' + d)

# Progamming info
mcu = features.get('mcu', 'atmega1280')
default_baud = '57600'
default_programmer = features.get('programmer', 'stk500v1')
upload_port = ARGUMENTS.get('port','/dev/ttyACM0')
upload_baud = ARGUMENTS.get('baud',default_baud)
upload_prog = ARGUMENTS.get('programmer',default_programmer)

# Build info
board_directory = features.get('board_directory', 'mighty_one')

# Sources to squeeze
squeeze_srcs = [ localefile ]
for s in features.get('squeeze', []):
    if s[0] != '[':
       squeeze_srcs.append(s)
    else:
	squeeze_srcs += eval(s)

# Must not have SoftI2cManager.cc
softi2c = [item for item in squeeze_srcs if item.endswith('SoftI2cManager.cc')]
if len(softi2c) != 0:
   squeeze_srcs.remove(softi2c[0])

# Handle any defines
if 'defines' in features:
   for d in features['defines']:
       if d[0] != '-':
           flags.append('-D' + d)
       else:
           flags.remove('-D' + d[1:])

if max31855 == '1':
   flags.append('-DMAX31855')
   max31855 = '_max31855'
else:
   max31855 = ''

target_name = platform+max31855+"_v"+str(int(version[0]))+"."+str(int(version[1]))+"."+str(int(version[2]))+broken_str

include_paths = ['MightyBoard/shared', 'MightyBoard/Motherboard', 'MightyBoard/shared/locale', 'MightyBoard/Motherboard/avrfix', 'MightyBoard/Motherboard/boards/%s' %board_directory, '.']

if broken_sd == '1':
   flags.append('-DBROKEN_SD')

if (corexy_s == '1'):
   flags.append('-DCORE_XY_STEPPER')

if (corexy == '1'):
   flags.append('-DCORE_XY')

if (steroids == '1'):
   flags.append('-DHEATERS_ON_STEROIDS')

if (has_i2c_lcd == '1'):
   flags.append('-DHAS_I2C_LCD')

if (has_i2c_lcd == 'ENABLE_PULLUPS'):
   flags.append('-DHAS_I2C_LCD')
   flags.append('-DENABLE_I2C_PULLUPS')

if (has_analog_buttons == '1'):
   flags.append('-DHAS_ANALOG_BUTTONS')

if (has_viki_interface == '1'):
   flags.append('-DHAS_VIKI_INTERFACE')

if (has_viki_interface == 'ENABLE_PULLUPS'):
   flags.append('-DHAS_VIKI_INTERFACE')
   flags.append('-DENABLE_I2C_PULLUPS')

if (alt_uart == '1'):
   flags.append('-DALTERNATE_UART')

if (zlevel == '1'):
   flags.append('-DPSTOP_ZMIN_LEVEL')

if (os.environ.has_key('BUILD_NAME')):
   flags.append('-DBUILD_NAME=' + os.environ['BUILD_NAME'])

if (os.environ.has_key('AVR_TOOLS_PATH')):
	avr_tools_path = os.environ['AVR_TOOLS_PATH']
	avr_tools_conf = os.environ['AVR_TOOLS_PATH'] + "/../etc/avrdude.conf"
## why AVR32_HOME? we have an avr not avr32!
## This conflicts with cygwin, if winavr is installed.
#elif (os.environ.has_key('AVR32_HOME')):
#	avr_tools_path = os.environ['AVR32_HOME'] + '/bin'
#	avr_tools_conf =  os.environ['AVR32_HOME'] + "/etc/avrdude.conf"
elif (os.environ.has_key('AVR_HOME')):
	avr_tools_path = os.environ['AVR_HOME'] + '/bin'
	avr_tools_conf =  os.environ['AVR_HOME'] + "/etc/avrdude.conf"
else:
	lines = os.popen('/usr/bin/which avr-gcc').readlines()
	if(len(lines) > 0):
		avr_tools_path = dirname(lines[0])
		avr_tools_conf = "/etc/avrdude.conf"
	else:
		print "which gcc failed. avr-gcc path not autodetected"
		print "set AVR_HOME or update 'which' and avr-gcc"
		exit()

flags_squeeze = []
for f in flags:
   flags_squeeze.append(f)
flags_squeeze.append('-mcall-prologues')

env=Environment(tools=['g++', 'gcc'],
        CC=avr_tools_path+"/avr-g++",
	CXX=avr_tools_path+"/avr-g++",
	CPPPATH=include_paths,
	CCFLAGS=flags)

env_sqz=Environment(tools=['g++', 'gcc'],
        CC=avr_tools_path+"/avr-g++",
	CXX=avr_tools_path+"/avr-g++",
	CPPPATH=include_paths,
	CCFLAGS=flags_squeeze)

env.AddMethod(filtered_glob_omit, "GlobOmit")
env_sqz.AddMethod(filtered_glob_keep, "GlobKeep")

objs = [ env.Object(env.GlobOmit('*.cc', squeeze_srcs) +
                    env.GlobOmit('MightyBoard/Motherboard/*.cc', squeeze_srcs) +
                    env.GlobOmit('MightyBoard/Motherboard/boards/%s/*.cc' % board_directory, squeeze_srcs) +
                    env.GlobOmit('MightyBoard/Motherboard/lib_sd/*.c', squeeze_srcs) +
                    env.GlobOmit('MightyBoard/shared/*.cc', squeeze_srcs) +
                    env.GlobOmit('MightyBoard/shared/locale/%s' % localefile, squeeze_srcs) +
                    env.GlobOmit('MightyBoard/Motherboard/avrfix/*.c', squeeze_srcs)),
         env_sqz.Object(env_sqz.GlobKeep('*.cc', squeeze_srcs) +
                        env_sqz.GlobKeep('MightyBoard/Motherboard/*.cc', squeeze_srcs) +
                        env_sqz.GlobKeep('MightyBoard/Motherboard/boards/%s/*.cc' % board_directory, squeeze_srcs) +
                        env_sqz.GlobKeep('MightyBoard/Motherboard/lib_sd/*.c', squeeze_srcs) +
                        env_sqz.GlobKeep('MightyBoard/shared/*.cc', squeeze_srcs) +
                        env_sqz.GlobKeep('MightyBoard/shared/locale/%s' % localefile, squeeze_srcs) +
                        env_sqz.GlobKeep('MightyBoard/Motherboard/avrfix/*.c', squeeze_srcs)) ]

# run_alias = Alias('run', [program], program[0].path)
# AlwaysBuild(run_alias)

target_name += '.' + localetarget
hex_name = target_name + '.hex'
elf_name = target_name + '.elf'
map_name = target_name + '.map'

env.Append(BUILDERS={'Elf':Builder(action=avr_tools_path+"/avr-gcc -mmcu="+mcu+" -Os -Wl,--gc-sections -Wl,-Map,build/"+platform+"/"+map_name+" -o $TARGET $SOURCES -lm")})
env.Append(BUILDERS={'Hex':Builder(action=avr_tools_path+"/avr-objcopy -O ihex -R .eeprom $SOURCES $TARGET")})
env.Elf(elf_name, objs)
env.Hex(hex_name, elf_name)

avrdude = avr_tools_path+"/avrdude"
avrdude_flags = "-F -V -p "+mcu.replace("atmega","m")
avrdude_flags = avrdude_flags + " -C "+avr_tools_conf
avrdude_flags = avrdude_flags + " -P "+upload_port
avrdude_flags = avrdude_flags + " -c "+upload_prog
avrdude_flags = avrdude_flags + " -b "+upload_baud
avrdude_command = " ".join([avrdude,avrdude_flags,"-U","flash:w:$SOURCES"])

# env.Alias instead of just Alias because of
# http://scons.tigris.org/issues/show_bug.cgi?id=2443
upload_alias = env.Alias('upload', hex_name, avrdude_command)
AlwaysBuild(upload_alias)
